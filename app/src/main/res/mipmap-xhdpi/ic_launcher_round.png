package com.vibeviroma.mapologs;

import android.app.NotificationChannel;
import android.app.NotificationManager;
import android.app.Service;
import android.content.Intent;
import android.graphics.Bitmap;
import android.media.RingtoneManager;
import android.net.Uri;
import android.os.IBinder;
import android.util.Log;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.core.app.NotificationCompat;

import com.google.android.gms.tasks.OnCompleteListener;
import com.google.android.gms.tasks.OnFailureListener;
import com.google.android.gms.tasks.OnSuccessListener;
import com.google.android.gms.tasks.Task;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.database.ChildEventListener;
import com.google.firebase.database.DataSnapshot;
import com.google.firebase.database.DatabaseError;
import com.google.firebase.database.DatabaseReference;
import com.google.firebase.database.FirebaseDatabase;
import com.google.firebase.database.ServerValue;
import com.google.firebase.storage.FirebaseStorage;
import com.google.firebase.storage.OnPausedListener;
import com.google.firebase.storage.OnProgressListener;
import com.google.firebase.storage.StorageReference;
import com.google.firebase.storage.UploadTask;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Send_img_Service extends  Service {
    private StorageReference storeProfileImageStorageReference;
    private DatabaseReference rootRef, Publicati, ecol_ref,User_Reference;
    static  int PROGRESS_NOTIF=-5;
    public static ShowProgressListener showProgressListener;
    public static continueTask continueTaskListener;

    public void setContinueTaskListener(continueTask continueTaskListener) {
        Send_img_Service.continueTaskListener = continueTaskListener;
    }

    static  int FINISHED_NOTIF=-5;
    static final String GROUPE_KEY_FINISH= "inbox_send_media_echec";
    static final String GROUPE_KEY="com.vnsilva.wechat.chatzone.notif.inbox.send_media";



    public void setShowProgressListener (ShowProgressListener showProgressListener) {
        Send_img_Service.showProgressListener = showProgressListener;
    }

    public static final String MESSAGE_RECEIVED_ID="msg_id", LEGENDE="legende", TYPE="type",I="i", COMPT="tot", IMAGE="image",
            VIDEO="video" , MESSAGE_RECEIVED_NAME="messageReceiveName", TOTAL="total", AUDIO="audio";
    public  static final String KEY= "key";
    private static final String NC_ID = "Commentaire vocal", TAG= "FCM_ChatZone";

    private String online_user_id, FROM_USER_ID, POST_KEY, lien="" ;


    @Override
    public IBinder onBind(Intent intent) {
        // TODO: Return the communication channel to the service.
        throw new UnsupportedOperationException("Not yet implemented");
    }


    @Override
    public void onCreate() {
        super.onCreate();
        storeProfileImageStorageReference = FirebaseStorage.getInstance().getReference().child("Materiels");
        User_Reference = FirebaseDatabase.getInstance().getReference().child("Users");
        online_user_id= FirebaseAuth.getInstance().getCurrentUser().getUid();
        rootRef= FirebaseDatabase.getInstance().getReference();
        rootRef.keepSynced(true);
        Publicati=FirebaseDatabase.getInstance().getReference().child("Materiels");
        ecol_ref=FirebaseDatabase.getInstance().getReference().child("Ecoles").child("Benin");
        ecol_ref.keepSynced(true);


    }

    @Override
    public int onStartCommand(Intent intent,  int flags, int startId) {
        if(intent==null)
            return START_STICKY;

        String path= intent.getExtras().getString(IMAGE);
        String key=intent.getExtras().getString(KEY);
        String materiel= intent.getExtras().getString(MESSAGE_RECEIVED_NAME);

        envoyer_le_fichier(path, key, materiel);
        return START_STICKY;

    }


    private void envoyer_le_fichier(final String path, final String key,
                                    final String materiel ) {
        {
            File f = new File(path);
            if (f.exists()) {
                {
                    Uri uri = Uri.fromFile(f);
                    UploadTask u=null;
                    Bitmap thumb_Bitmap = null;
                    StorageReference thumb_filePath =null;
                    String caption = "";
                    String echec = "", succes = "";

                    caption = "Envoi de "+materiel;
                    echec = "Echec d\'envoi du média";
                    succes = "Photo envoyée !";

                    thumb_filePath= storeProfileImageStorageReference.child(key+ ".jpg");

                    String lien= new ImageCompress(this).compressImage(path);

                    u =thumb_filePath.putFile(Uri.fromFile(new File(lien)));

                    showProgrNotif(materiel, caption, 0, 0);

                    final String finalCaption = caption;
                    final StorageReference finalThumb_filePath = thumb_filePath;
                    u.addOnProgressListener(new OnProgressListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onProgress(UploadTask.TaskSnapshot taskSnapshot) {
                            showProgrNotif(materiel, finalCaption, taskSnapshot.getBytesTransferred(), taskSnapshot.getTotalByteCount());

                        }
                    }).addOnFailureListener(new OnFailureListener() {
                        @Override
                        public void onFailure(@NonNull Exception e) {
                            dismissProgressN();
                        }
                    }).addOnCompleteListener(new OnCompleteListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onComplete(@NonNull Task<UploadTask.TaskSnapshot> task) {
                            if (task.isSuccessful()) {

                                finalThumb_filePath.getDownloadUrl().addOnSuccessListener(new OnSuccessListener<Uri>() {
                                    @Override
                                    public void onSuccess(Uri uri) {
                                        String path= uri.toString();
                                        Log.d("STORAGE_LINK", path);
                                        Publicati.child(key).child("lien").setValue(path);
                                        dismissProgressN();
                                    }
                                });
                            }
                        }
                    }).addOnPausedListener(new OnPausedListener<UploadTask.TaskSnapshot>() {
                        @Override
                        public void onPaused(UploadTask.TaskSnapshot taskSnapshot) {
                        }
                    });
                }
            }
        }
    }


    public interface continueTask{
        void inPause(String path, boolean succes, String key_msg, UploadTask upload);

    }

    public interfac